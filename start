#!/usr/bin/env bash

. app.env

. composed-services.sh


function start_all_shared(){
    start_fixtures
    wait_for_cpu
    start_data_seed
    start_core
    wait_for_cpu
    start_shared_services
}

function start_all(){
    start_all_shared
    wait_for_cpu
    start_vet
    wait_for_cpu
    start_staff
    wait_for_cpu
    start_vista
    wait_for_cpu
    start_via
    wait_for_cpu
    start_var
    wait_for_cpu
    start_sm
    wait_for_cpu
    start_vats
}

function start_all_vet(){
    start_all_shared
    wait_for_cpu
    start_vet
    wait_for_cpu
    start_vista
    wait_for_cpu
    start_via

}

function start_all_staff(){
    start_all_shared
    wait_for_cpu
    start_staff
    wait_for_cpu
    start_vista
    wait_for_cpu
    start_via
    wait_for_cpu
    start_sm
}

function start_fixtures(){
    echo -e "\nStarting Fixtures\n"
    docker-compose stop "${fixtures[@]}"
    if [ "$PULL" = true ] ; then
        docker-compose pull --ignore-pull-failures "${fixtures[@]}"
    fi
    docker-compose up -d --force-recreate --no-deps "${fixtures[@]}"
}

function wait_for_cpu() {
    echo -e "\nWaiting for cpu availability"
    TH=80
    CPU=$(ps -A -o %cpu | awk '{s+=$1} END {print int(s + 0.5)}')
    while [[ "$CPU" -ge "$TH" ]]; do
        CPU=$(ps -A -o %cpu | awk '{s+=$1} END {print int(s + 0.5)}')
        printf "."
        sleep 1s
    done
    echo
}

function wait_container_healthy() {
    echo -e "\nWaiting for $1 to be ready"
    while true; do
        status=$(docker inspect --format="{{.State.Health.Status}}" $1)
        if [[ $status == "healthy" ]];
            then
                break;
        fi
        printf "."
        sleep 1s
    done
    echo
}

function start_vista(){
    echo -e "\nStarting VistA\n"
    docker-compose stop "${vista[@]}"
    if [ "$PULL" = true ] ; then
        docker-compose pull --ignore-pull-failures "${vista[@]}"
    fi
    docker-compose up -d --force-recreate --no-deps "${vista[@]}"
    wait_container_healthy vaos-vista
}

function start_via(){
    echo -e "\nStarting VIA\n"
    docker-compose stop "${via[@]}"
    if [ "$PULL" = true ] ; then
        docker-compose pull --ignore-pull-failures "${via[@]}"
    fi
    docker-compose up -d --force-recreate --no-deps via-oracle
    echo -e "\nWaiting 30s for via-oracle...\n"
    sleep 30
    docker-compose up -d --force-recreate --no-deps via-weblogic
}

function start_data_seed(){
    echo -e "\nStarting Data Seed\n"
    docker-compose stop var-mongo-data-seed
    if [ "$PULL" = true ] ; then
        docker-compose pull var-mongo-data-seed
    fi
    docker-compose up -d var-mongo-data-seed
}

function start_core(){
    ## Start Consul first
    echo -e "\nStarting Consul\n"
    # docker-compose up -d consul vault || (echo "*** FAILED: Could not start Consul or Vault using docker-compose." && exit -1)

    docker-compose up -d consul || (echo "*** FAILED: Could not start Consul or Vault using docker-compose." && exit -1)

    wait_container_healthy consul

    echo -e "\nRegistering core services to Consul... \n"
    ./consul-registration/register-core.sh

    if [ "$PULL" = true ] ; then
        docker-compose pull "${core[@]}"
    fi
    docker-compose up -d --force-recreate --no-deps "${core[@]}" || (echo "*** FAILED: Could not start core containers using docker-compose." && exit -1)
}

function start_shared_services(){
    echo -e "\n Starting Shared Services\n"
    ./consul-registration/register-shared-services.sh
    docker-compose stop "${ss[@]}"
    if [ "$PULL" = true ] ; then
        docker-compose pull "${ss[@]}"
    fi
    docker-compose up -d --force-recreate --no-deps "${ss[@]}"
}

function start_vet(){
    echo -e "\nStarting all Veteran Services\n"
    docker-compose stop "${vet[@]}"
    if [ "$PULL" = true ] ; then
        docker-compose pull "${vet[@]}"
    fi
    docker-compose up -d --force-recreate --no-deps "${vet[@]}"
    docker-compose up -d --force-recreate --no-deps patient-context pgd-ccda fit-heart-web database pgd-fhir-services rbac-api  || (echo "*** FAILED: Could not start containers using docker-compose." && exit -1)

}

function start_staff(){
    echo -e "\nStarting all Staff Services\n"
    ./consul-registration/register-staff.sh
    docker-compose stop "${staff[@]}"
    if [ "$PULL" = true ] ; then
        docker-compose pull "${staff[@]}"
    fi
    docker-compose up -d --force-recreate --no-deps "${staff[@]}"
}

function start_var(){
    echo -e "\nStarting VAOS\n"
    ./consul-registration/register-var.sh
    ./consul-registration/register-fitheart.sh
    docker-compose stop "${var[@]}"
    if [ "$PULL" = true ] ; then
        docker-compose pull "${var[@]}"
    fi
    docker-compose up -d --force-recreate --no-deps "${var[@]}"
}

function start_sm(){
    echo -e "\nStarting Scheduling Manager\n"
    ./consul-registration/register-sm.sh
    docker-compose stop "${sm[@]}"
    if [ "$PULL" = true ] ; then
        docker-compose pull "${sm[@]}"
    fi
    docker-compose up -d --force-recreate --no-deps "${sm[@]}"
}

function start_vats(){
    echo -e "\nStarting VATS\n"
    ./consul-registration/register-vats.sh
    docker-compose stop "${vats[@]}"
    if [ "$PULL" = true ] ; then
        docker-compose pull "${vats[@]}"
    fi
    docker-compose up -d --force-recreate --no-deps "${vats[@]}"
}
